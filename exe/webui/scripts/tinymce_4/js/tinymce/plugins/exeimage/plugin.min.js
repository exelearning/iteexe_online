/**
 * plugin.min.js
 *
 * Released under LGPL License.
 * Copyright (c) 1999-2015 Ephox Corp. All rights reserved
 *
 * License: http://www.tinymce.com/license
 * Contributing: http://www.tinymce.com/contributing
 */

/**
 * "Title and Attribution" tab by Ignacio Gros (http://gros.es/)
 * The rest is just a copy of TinyMCE's plugins\image\plugin.js
 * Released under Attribution 4.0 International License.
 * License: http://creativecommons.org/licenses/by/4.0/
 */

/*global tinymce:true */

// The New eXeLearning
// tinymce.PluginManager.add('image', function(editor) {
	tinymce.PluginManager.add('exeimage', function(editor, url) {
		// / The New eXeLearning
			function getImageSize(url, callback) {
				var img = document.createElement('img');

				function done(width, height) {
					if (img.parentNode) {
						img.parentNode.removeChild(img);
					}

					callback({width: width, height: height});
				}

				img.onload = function() {
					done(Math.max(img.width, img.clientWidth), Math.max(img.height, img.clientHeight));
				};

				img.onerror = function() {
					done();
				};

				var style = img.style;
				style.visibility = 'hidden';
				style.position = 'fixed';
				style.bottom = style.left = 0;
				style.width = style.height = 'auto';

				document.body.appendChild(img);
				img.src = url;
			}

			function buildListItems(inputList, itemCallback, startItems) {
				function appendItems(values, output) {
					output = output || [];

					tinymce.each(values, function(item) {
						var menuItem = {text: item.text || item.title};

						if (item.menu) {
							menuItem.menu = appendItems(item.menu);
						} else {
							menuItem.value = item.value;
							itemCallback(menuItem);
						}

						output.push(menuItem);
					});

					return output;
				}

				return appendItems(inputList, startItems || []);
			}

			function createImageList(callback) {
				return function() {
					var imageList = editor.settings.image_list;

					if (typeof imageList == "string") {
						tinymce.util.XHR.send({
							url: imageList,
							success: function(text) {
								callback(tinymce.util.JSON.parse(text));
							}
						});
					} else if (typeof imageList == "function") {
						imageList(callback);
					} else {
						callback(imageList);
					}
				};
			}

			// The New eXeLearning
			function toggleCustomLicense(value) {

				var customLicense = jQuery("#customcaptionlicense");
				var customLicenseLabel = jQuery("#customcaptionlicense-l");

				if (value!='custom') {
					customLicense.val("").prop("disabled","disabled").css("opacity",0.2);
					customLicenseLabel.css("opacity",0.2);
				} else {
					customLicense.prop("disabled",false).css("opacity",1);
					customLicenseLabel.css("opacity",1);
				}

			}
			// / The New eXeLearning

			function showDialog(imageList) {

				// The New eXeLearning
				// Is in figure?
				var elm = editor.selection.getNode();
				if ((elm.nodeName=='DIV' || elm.nodeName=='FIGURE') && jQuery(elm).hasClass("exe-figure")) {
					// editor.selection.select(editor.dom.select('img')[0]);
					// elm = editor.selection.getNode();
					var imgs = jQuery("img",elm);
					if (imgs.length>0) {
						elm = imgs.eq(0)[0];
						try{
							editor.selection.select(elm);
						} catch(e){
							// IndexSizeError: Index or size is negative or greater than the allowed amount
						}
					}
				}
				var figure = editor.dom.getParents(elm, '.exe-figure');
				if (figure.length==1 && elm.nodeName!="IMG") {
					editor.windowManager.alert(_('Please select the image to edit it'));
					return false;
				}
				// / The New eXeLearning

				var win, data = {}, dom = editor.dom, imgElm, figureElm;
				var width, height, imageListCtrl, classListCtrl, imageDimensions = editor.settings.image_dimensions !== false;

				function recalcSize(origin) { // The New eXeLearning (new var)
					var widthCtrl, heightCtrl, newWidth, newHeight;

					widthCtrl = win.find('#width')[0];
					heightCtrl = win.find('#height')[0];

					if (!widthCtrl || !heightCtrl) {
						return;
					}

					newWidth = widthCtrl.value();
					newHeight = heightCtrl.value();

					// The New eXeLearning
					// To review (see issue #157 and current_image_size in authoring.js)
					if (typeof(width)=='undefined' && newWidth!="") {
						if (typeof(exe_tinymce)!="undefined" && typeof(exe_tinymce.current_image_size)!="undefined") {
							var d = exe_tinymce.current_image_size;
							var width = d[0];
							var height = d[1];
						}
					}
					// / The New eXeLearning

					if (win.find('#constrain')[0].checked() && width && height && newWidth && newHeight) {

						// The New eXeLearning
						/*
						if (width != newWidth) {
							newHeight = Math.round((newWidth / width) * newHeight);

							if (!isNaN(newHeight)) {
								heightCtrl.value(newHeight);
							}
						} else {
							newWidth = Math.round((newHeight / height) * newWidth);

							if (!isNaN(newWidth)) {
								widthCtrl.value(newWidth);
							}
						}
						*/
						if (!origin) {
							var origin = 'width';
							if (typeof(exe_tinymce)!="undefined" && typeof(exe_tinymce.current_image_size)!="undefined") {
								if (exe_tinymce.current_image_size[1]!=newHeight) origin = 'height';
							}
						}
						if (origin=='width') {
							newHeight = Math.round( height * newWidth / width );
							if (!isNaN(newHeight)) heightCtrl.value(newHeight);
						} else {
							newWidth = Math.round( newHeight * width / height );
							if (!isNaN(newWidth)) widthCtrl.value(newWidth);
						}
						// / The New eXeLearning

					}

					width = newWidth;
					height = newHeight;
				}

				function onSubmitForm() {
					var figureElm, oldImg;

					function waitLoad(imgElm) {
						function selectImage() {
							imgElm.onload = imgElm.onerror = null;

							if (editor.selection) {
								editor.selection.select(imgElm);
								editor.nodeChanged();
							}
						}

						imgElm.onload = function() {
							if (!data.width && !data.height && imageDimensions) {
								dom.setAttribs(imgElm, {
									width: imgElm.clientWidth,
									height: imgElm.clientHeight
								});
							}

							selectImage();
						};

						imgElm.onerror = selectImage;
					}

					updateStyle();
					recalcSize();

					data = tinymce.extend(data, win.toJSON());

					if (!data.alt) {
						data.alt = '';
					}

					if (!data.title) {
						data.title = '';
					}

					if (data.width === '') {
						data.width = null;
					}

					if (data.height === '') {
						data.height = null;
					}

					if (!data.style) {
						data.style = null;
					}

					// The New eXeLearning

					// Save some data values
					var imageHeader = data.imageheader;
					var imageTitle = data.imagetitle;
					var imageTitleLink = data.imagetitlelink;
					var authorName = data.authorname;
					var authorNameLink = data.authornamelink;
					var captionLicense = data.captionlicense;

					// Remove them, so TinyMCE doesn't create an image with those custom attibutes
					data.imageheader = null;
					data.imagetitle = null;
					data.imagetitlelink = null;
					data.authorname = null;
					data.authornamelink = null;
					data.captionlicense = null;
					data.customcaptionlicense = null;
					data.constrain = null;

					for (var i in data) {
						if (i!="alt" && data[i]=="") data[i] = null;
					}

					// Create the image
					var c = editor.dom.createHTML('img', data);

					// Add the wrapper if needed
					if (imageHeader!="" || imageTitle!="" || imageTitleLink!="" || authorName!="" || authorNameLink!="" || captionLicense!="") {
						var hText = "";
						var cText = "";
						var license = "";

						var figureTag = "div";
						var headerFigcaptionTag = "div";
						var footerFigcaptionTag = "div";
						if (typeof(exe_export_format)!='undefined' && exe_export_format=="html5") {
							figureTag = "figure";
							if (imageTitle=="" && imageTitleLink=="" && authorName=="" && authorNameLink=="" && captionLicense=="") headerFigcaptionTag = "figcaption";
							footerFigcaptionTag = "figcaption";
						}

						//Header
						if (imageHeader!="") {
							hText = "<"+headerFigcaptionTag+" class='figcaption header'><strong>"+imageHeader+"</strong></"+headerFigcaptionTag+">";
						}

						//Author and link
						if (authorName!="") {
							if (authorNameLink!="") {
								cText+="<a href='"+authorNameLink+"' target='_blank' class='author'>"+authorName+"</a>";
							} else {
								cText+="<span class='author'>"+authorName+"</span>";
							}
						} else {
							if (authorNameLink!="") {
								cText+="<a href='"+authorNameLink+"' target='_blank' class='author'>"+authorNameLink+"</a>";
							}
						}

						//Title and link
						if (imageTitle!="") {
							if (cText!="") cText+=". ";
							if (imageTitleLink!="") {
								cText+="<a href='"+imageTitleLink+"' target='_blank' class='title'><em>"+imageTitle+"</em></a>";
							} else {
								cText+="<span class='title'><em>"+imageTitle+"</em></span>";
							}
						} else {
							if (imageTitleLink!="") {
								if (cText!="") cText+=" - ";
								cText+="<a href='"+imageTitleLink+"' target='_blank' class='title'><em>"+imageTitleLink+"</em></a>";
							}
						}

						//License:
						var licenseLang = "en";
						var ccLink = "http://creativecommons.org/licenses/";
						var w = window.opener;
						if (!w) w = window.parent;
						if (w && w.document.getElementsByTagName) {
							var lang = w.document.getElementsByTagName("HTML")[0].lang;
							if (lang && lang != "") licenseLang = lang;
							if (lang!="en") ccLink += "?lang="+lang;
						}

						if (captionLicense!="") {

							if (captionLicense=="custom") {
								license = win.find("#customcaptionlicense")[0].value();
							} else if (captionLicense=="pd") {
								license = "<span>"+_("Public Domain")+"</span>";
							} else if (captionLicense=="gnu-gpl") {
								license = "<a href='http://www.gnu.org/licenses/gpl.html' rel='license nofollow' target='_blank'>GNU/GPL</a>";
							} else if (captionLicense=="gfdl") {
								license = "<a href='https://www.gnu.org/licenses/fdl-1.3.html' rel='license nofollow' target='_blank'>GFDL</a>";
							} else if (captionLicense=="CC0") {
								license = "<a href='http://creativecommons.org/publicdomain/zero/1.0/deed."+licenseLang+"' rel='license nofollow' target='_blank' title='Creative Commons (CC0)'>CC0</a>";
							} else if (captionLicense=="copyright") {
								license = "<span>"+_("All Rights Reserved")+"</span>";
							} else {
								license = "<a href='"+ccLink+"' rel='license nofollow' target='_blank' title='"+captionLicense.replace("CC-","Creative Commons ")+"'>"+captionLicense.replace("CC-","CC ")+"</a>";
							}

							if (license!="") {
								if (captionLicense=="custom") license = '<span class="custom-license">'+license+'</span>';
								if (cText!="") {
									license = ' <span class="license"><span class="sep">(</span>'+license+'<span class="sep">)</span></span>';
								} else {
									license = '<span class="license"><span class="tit">'+_("License")+": </span>"+license+"</span>";
								}
							}

						}

						var defaultPos = "position-center";
						var imageAlignment = data.align;
						if (imageAlignment=="left" || imageAlignment=="right") {
							defaultPos = "float-"+imageAlignment;
						}
						// Remove some attributes
						data.align = null;
						data.imageOptimizer = null;
						// Remove float:...
						if (data.style) {
							data.style = data.style.replace("float: right;","");
							data.style = data.style.replace("float: left;","");
						}
						c = editor.dom.createHTML('img', data);

						// An image with a link (see issue 386)
						if (imgElm && imgElm.parentNode && imgElm.parentNode.nodeName && imgElm.parentNode.nodeName=="A") {
							var tmp = $("<div></div>");
								tmp.html(imgElm.parentNode);
								$("img",tmp).remove();
								$("a",tmp).html(c);
								c = tmp.html();
						}

						var cssClass = "exe-figure exe-image "+defaultPos;
						if (captionLicense!="") cssClass += " license-"+captionLicense;
						var extraStyle="";
						if (data.width) extraStyle="width:"+data.width+"px;";

						var fText = "";
						if (cText!="" || license!="") fText = "<"+footerFigcaptionTag+" class='figcaption'>"+cText+license+"</"+footerFigcaptionTag+">";

						c = "<"+figureTag+" class='"+cssClass+"' style='"+extraStyle+"'>"+hText+c+fText+"</"+figureTag+">";
						
						// Is in figure?
						if (figure.length==1) {

							// We have to add a tmp string, otherwise some elements might be deleted in Safari when updating the image (issue #576)
							jQuery(figure).before("%exeimage_tmp_figure%");
							editor.dom.remove(figure);

							// If the editor is empty we have to insert the content like this
							// Otherwise no content will be added (the editor will remain empty)
							if (editor.getContent()=="") {

								editor.setContent(c+"<br />");
								editor.windowManager.close();
								return;

							} else {
								
								editor.setContent(editor.getContent().replace("%exeimage_tmp_figure%",c));
								editor.windowManager.close();
								return;								
								
							}

						} else {

							// New figure (we add a new paragraph after it so it's easier to keep writing)
							c += "<br />";

						}

						editor.execCommand('mceInsertContent', false, c, {skip_undo : 1});
						editor.windowManager.close();
						return;

					} else {
						// An image with a link (see issue 386)
						if (imgElm && imgElm.parentNode && imgElm.parentNode.nodeName && imgElm.parentNode.nodeName=="A") {
							var tmp = $("<div></div>");
								tmp.html(imgElm.parentNode);
								$("img",tmp).remove();
								$("a",tmp).html(c);
								c = tmp.html();
						}
					}
					// / The New eXeLearning

					// Setup new data excluding style properties
					/*eslint dot-notation: 0*/
					data = {
						src: data.src,
						alt: data.alt,
						title: data.title,
						width: data.width,
						height: data.height,
						style: data.style,
						caption: data.caption,
						"class": data["class"]
					};

					editor.undoManager.transact(function() {
						if (!data.src) {
							if (imgElm) {
								dom.remove(imgElm);
								editor.focus();
								editor.nodeChanged();
							}

							return;
						}

						if (data.title === "") {
							data.title = null;
						}

						if (!imgElm) {
							data.id = '__mcenew';
							editor.focus();
							editor.selection.setContent(dom.createHTML('img', data));
							imgElm = dom.get('__mcenew');
							dom.setAttrib(imgElm, 'id', null);
						} else {
							dom.setAttribs(imgElm, data);
						}

						editor.editorUpload.uploadImagesAuto();

						if (data.caption === false) {
							if (dom.is(imgElm.parentNode, 'figure.image')) {
								figureElm = imgElm.parentNode;
								dom.insertAfter(imgElm, figureElm);
								dom.remove(figureElm);
							}
						}

						function isTextBlock(node) {
							return editor.schema.getTextBlockElements()[node.nodeName];
						}

						if (data.caption === true) {
							if (!dom.is(imgElm.parentNode, 'figure.image')) {
								oldImg = imgElm;
								imgElm = imgElm.cloneNode(true);
								figureElm = dom.create('figure', {'class': 'image'});
								figureElm.appendChild(imgElm);
								figureElm.appendChild(dom.create('figcaption', {contentEditable: true}, 'Caption'));
								figureElm.contentEditable = false;

								var textBlock = dom.getParent(oldImg, isTextBlock);
								if (textBlock) {
									dom.split(textBlock, oldImg, figureElm);
								} else {
									dom.replace(figureElm, oldImg);
								}

								editor.selection.select(figureElm);
							}

							return;
						}

						waitLoad(imgElm);
					});

					// The New eXeLearning
					editor.windowManager.close();
					// / The New eXeLearning

				}

				function removePixelSuffix(value) {
					if (value) {
						value = value.replace(/px$/, '');
					}

					return value;
				}

				function srcChange(e) {
					var srcURL, prependURL, absoluteURLPattern, meta = e.meta || {};

					if (imageListCtrl) {
						imageListCtrl.value(editor.convertURL(this.value(), 'src'));
					}

					tinymce.each(meta, function(value, key) {
						win.find('#' + key).value(value);
					});

					if (!meta.width && !meta.height) {
						srcURL = editor.convertURL(this.value(), 'src');

						// Pattern test the src url and make sure we haven't already prepended the url
						prependURL = editor.settings.image_prepend_url;
						absoluteURLPattern = new RegExp('^(?:[a-z]+:)?//', 'i');
						if (prependURL && !absoluteURLPattern.test(srcURL) && srcURL.substring(0, prependURL.length) !== prependURL) {
							srcURL = prependURL + srcURL;
						}

						this.value(srcURL);

						getImageSize(editor.documentBaseURI.toAbsolute(this.value()), function(data) {
							if (data.width && data.height && imageDimensions) {
								width = data.width;
								height = data.height;

								win.find('#width').value(width);
								win.find('#height').value(height);
							}
						});
					}
				}

				imgElm = editor.selection.getNode();
				figureElm = dom.getParent(imgElm, 'figure.image');
				if (figureElm) {
					imgElm = dom.select('img', figureElm)[0];
				}

				if (imgElm && (imgElm.nodeName != 'IMG' || imgElm.getAttribute('data-mce-object') || imgElm.getAttribute('data-mce-placeholder'))) {
					imgElm = null;
				}

				if (imgElm) {
					width = dom.getAttrib(imgElm, 'width');
					height = dom.getAttrib(imgElm, 'height');

					data = {
						src: dom.getAttrib(imgElm, 'src'),
						alt: dom.getAttrib(imgElm, 'alt'),
						title: dom.getAttrib(imgElm, 'title'),
						"class": dom.getAttrib(imgElm, 'class'),
						width: width,
						height: height,
						caption: !!figureElm
					};
				}

				if (imageList) {
					imageListCtrl = {
						type: 'listbox',
						label: 'Image list',
						values: buildListItems(
							imageList,
							function(item) {
								item.value = editor.convertURL(item.value || item.url, 'src');
							},
							[{text: 'None', value: ''}]
						),
						value: data.src && editor.convertURL(data.src, 'src'),
						onselect: function(e) {
							var altCtrl = win.find('#alt');

							if (!altCtrl.value() || (e.lastControl && altCtrl.value() == e.lastControl.text())) {
								altCtrl.value(e.control.text());
							}

							win.find('#src').value(e.control.value()).fire('change');
						},
						onPostRender: function() {
							/*eslint consistent-this: 0*/
							imageListCtrl = this;
						}
					};
				}

				if (editor.settings.image_class_list) {
					classListCtrl = {
						name: 'class',
						type: 'listbox',
						label: 'Class',
						values: buildListItems(
							editor.settings.image_class_list,
							function(item) {
								if (item.value) {
									item.textStyle = function() {
										return editor.formatter.getCssText({inline: 'img', classes: [item.value]});
									};
								}
							}
						)
					};
				}
				
				function setCookie(cname, cvalue, exdays) {
					var d = new Date();
					d.setTime(d.getTime() + (exdays*24*60*60*1000));
					var expires = "expires="+ d.toUTCString();
					document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
				}

				function getCookie(cname) {
					var name = cname + "=";
					var decodedCookie = decodeURIComponent(document.cookie);
					var ca = decodedCookie.split(';');
					for(var i=0;i<ca.length;i++) {
						var c = ca[i];
						while (c.charAt(0) == ' ') c = c.substring(1);
						if (c.indexOf(name) == 0) return c.substring(name.length, c.length);
					}
					return "";
				}
				
				function getImageOptimizer(){
					if (getCookie("exeimageImageOptimizer")=="1") return true;
					return false;
				}

				// General settings shared between simple and advanced dialogs
				var generalFormItems = [
					{
						name: 'src',
						type: 'filepicker',
						filetype: 'image',
						label: 'Source',
						autofocus: true,
						onchange: srcChange
					},
					{
						name: 'imageOptimizer', 
						type: 'checkbox', 
						checked: getImageOptimizer(), 
						style: "text-align:right",
						text: _("Image optimizer"),
						onchange: function(){
							var val = "0";
							var optimizerOpt = win.find("#imageOptimizer");
							if (optimizerOpt.length==1 && optimizerOpt.checked()) val = "1";
							
							// You can't enable it right after selecting an image
							if (val=="1") {
								var src = win.find('#src').value();
								if (src.indexOf("/previews/")==0) {
									val = "0";
									editor.windowManager.confirm(
										"1. "+_("Clear Image")+" — 2. "+_("Select image")+" ("+_("Source")+")",
										function(s){
											if (s) {
												win.find("#src").value("");
												win.find("#imageOptimizer").checked(true);
											}
										}
									);									
									setTimeout(function(){
										optimizerOpt.checked(false);
									},250);
								}
							}
							
							setCookie("exeimageImageOptimizer",val,30);
						}
					},					
					imageListCtrl
				];

				if (editor.settings.image_description !== false) {
					generalFormItems.push({name: 'alt', type: 'textbox', label: 'Image description'});
				}

				if (editor.settings.image_title) {
					generalFormItems.push({name: 'title', type: 'textbox', label: 'Image Title'});
				}

				if (imageDimensions) {
					generalFormItems.push({
						type: 'container',
						label: 'Dimensions',
						layout: 'flex',
						direction: 'row',
						align: 'center',
						spacing: 5,
						items: [
							{name: 'width', type: 'textbox', maxLength: 5, size: 3, onchange: function(){ recalcSize('width') }, ariaLabel: 'Width'},
							{type: 'label', text: 'x'},
							{name: 'height', type: 'textbox', maxLength: 5, size: 3, onchange: function(){ recalcSize('height') }, ariaLabel: 'Height'},
							{name: 'constrain', type: 'checkbox', checked: true, text: 'Constrain proportions'}
						]
					});
				}

				generalFormItems.push(classListCtrl);

				if (editor.settings.image_caption && tinymce.Env.ceFalse) {
					generalFormItems.push({name: 'caption', type: 'checkbox', label: 'Caption'});
				}

				function mergeMargins(css) {
					if (css.margin) {

						var splitMargin = css.margin.split(" ");

						switch (splitMargin.length) {
							case 1: //margin: toprightbottomleft;
								css['margin-top'] = css['margin-top'] || splitMargin[0];
								css['margin-right'] = css['margin-right'] || splitMargin[0];
								css['margin-bottom'] = css['margin-bottom'] || splitMargin[0];
								css['margin-left'] = css['margin-left'] || splitMargin[0];
								break;
							case 2: //margin: topbottom rightleft;
								css['margin-top'] = css['margin-top'] || splitMargin[0];
								css['margin-right'] = css['margin-right'] || splitMargin[1];
								css['margin-bottom'] = css['margin-bottom'] || splitMargin[0];
								css['margin-left'] = css['margin-left'] || splitMargin[1];
								break;
							case 3: //margin: top rightleft bottom;
								css['margin-top'] = css['margin-top'] || splitMargin[0];
								css['margin-right'] = css['margin-right'] || splitMargin[1];
								css['margin-bottom'] = css['margin-bottom'] || splitMargin[2];
								css['margin-left'] = css['margin-left'] || splitMargin[1];
								break;
							case 4: //margin: top right bottom left;
								css['margin-top'] = css['margin-top'] || splitMargin[0];
								css['margin-right'] = css['margin-right'] || splitMargin[1];
								css['margin-bottom'] = css['margin-bottom'] || splitMargin[2];
								css['margin-left'] = css['margin-left'] || splitMargin[3];
						}
						delete css.margin;
					}
					return css;
				}

				function updateStyle() {
					function addPixelSuffix(value) {
						if (value.length > 0 && /^[0-9]+$/.test(value)) {
							value += 'px';
						}

						return value;
					}

					if (!editor.settings.image_advtab) {
						return;
					}

					var data = win.toJSON(),
						css = dom.parseStyle(data.style);

					css = mergeMargins(css);

					if (data.vspace) {
						css['margin-top'] = css['margin-bottom'] = addPixelSuffix(data.vspace);
					} else {
						css['margin-top'] = css['margin-bottom'] = ""; // The New eXeLearning
					}
					if (data.hspace) {
						css['margin-left'] = css['margin-right'] = addPixelSuffix(data.hspace);
					} else {
						css['margin-left'] = css['margin-right'] = ""; // The New eXeLearning
					}
					if (data.border) {
						css['border-width'] = addPixelSuffix(data.border);
					} else {
						css['border-width'] = ""; // The New eXeLearning
					}

					// The New eXeLearning
					if (data.align) {
						var align = data.align;
						if (align=="left" || align=="right") {
							css['vertical-align'] = "";
							css['float'] = align;
						} else {
							css['vertical-align'] = align;
							css['float'] = "";
						}
					} else {
						css['vertical-align'] = "";
						css['float'] = "";
					}
					// / The New eXeLearning

					win.find('#style').value(dom.serializeStyle(dom.parseStyle(dom.serializeStyle(css))));
				}

				function updateVSpaceHSpaceBorder() {
					if (!editor.settings.image_advtab) {
						return;
					}

					var data = win.toJSON(),
						css = dom.parseStyle(data.style);

					win.find('#vspace').value("");
					win.find('#hspace').value("");

					css = mergeMargins(css);

					//Move opposite equal margins to vspace/hspace field
					if ((css['margin-top'] && css['margin-bottom']) || (css['margin-right'] && css['margin-left'])) {
						if (css['margin-top'] === css['margin-bottom']) {
							win.find('#vspace').value(removePixelSuffix(css['margin-top']));
						} else {
							win.find('#vspace').value('');
						}
						if (css['margin-right'] === css['margin-left']) {
							win.find('#hspace').value(removePixelSuffix(css['margin-right']));
						} else {
							win.find('#hspace').value('');
						}
					}

					//Move border-width
					if (css['border-width']) {
						win.find('#border').value(removePixelSuffix(css['border-width']));
					}

					win.find('#style').value(dom.serializeStyle(dom.parseStyle(dom.serializeStyle(css))));

				}

				if (editor.settings.image_advtab) {
					// Parse styles from img
					if (imgElm) {
						if (imgElm.style.marginLeft && imgElm.style.marginRight && imgElm.style.marginLeft === imgElm.style.marginRight) {
							data.hspace = removePixelSuffix(imgElm.style.marginLeft);
						}
						if (imgElm.style.marginTop && imgElm.style.marginBottom && imgElm.style.marginTop === imgElm.style.marginBottom) {
							data.vspace = removePixelSuffix(imgElm.style.marginTop);
						}
						if (imgElm.style.borderWidth) {
							data.border = removePixelSuffix(imgElm.style.borderWidth);
						}
						// The New eXeLearning
						if (imgElm.style.verticalAlign) {
							data.align = imgElm.style.verticalAlign;
						} else if (imgElm.style.float) {
							data.align = imgElm.style.float;
						}
						// / The New eXeLearning

						data.style = editor.dom.serializeStyle(editor.dom.parseStyle(editor.dom.getAttrib(imgElm, 'style')));
					}

					// Advanced dialog shows general+advanced tabs
					// The New eXeLearning
					function getTabContent() {
						return [
									{
										label: _("Header"),
										name: 'imageheader',
										id: 'imageheader',
										type: 'textbox'
									},
									{
										type: 'fieldset',
										title: _('Footer caption'),
										style: 'margin-top:5px',
										items: [
											{
												label: _("Image Title"),
												name: 'imagetitle',
												id: 'imagetitle',
												type: 'textbox'
											},
											{
												label: _("Title Link"),
												name: 'imagetitlelink',
												id: 'imagetitlelink',
												type: 'textbox'
											},
											{
												label: _("Source/Author"),
												name: 'authorname',
												id: 'authorname',
												type: 'textbox'
											},
											{
												label: _("Source/Author Link"),
												name: 'authornamelink',
												id: 'authornamelink',
												type: 'textbox'
											},
											{
												name: 'captionlicense',
												id: 'captionlicense',
												type: 'listbox',
												label: _("License"),
												values: [
													{text: _("Choose a license..."), value: ''},
													{text: _("Public Domain"), value: 'pd'},
													{text: "GNU/GPL", value: 'gnu-gpl'},
													{text: "GFDL", value: 'gfdl'},
													{text: "Creative Commons ("+_("Public Domain")+")", value: 'CC0'},
													{text: "Creative Commons BY", value: 'CC-BY'},
													{text: "Creative Commons BY-SA", value: 'CC-BY-SA'},
													{text: "Creative Commons BY-ND", value: 'CC-BY-ND'},
													{text: "Creative Commons BY-NC", value: 'CC-BY-NC'},
													{text: "Creative Commons BY-NC-SA", value: 'CC-BY-NC-SA'},
													{text: "Creative Commons BY-NC-ND", value: 'CC-BY-NC-ND'},
													{text: "Copyright ("+_("All Rights Reserved")+")", value: 'copyright'},
													{text: _("Custom license"), value: 'custom'}
												],
												onselect : function(){
													toggleCustomLicense(this.value());
												}
											},
											{
												name: 'customcaptionlicense',
												id: 'customcaptionlicense',
												type: 'textbox',
												label: _("Custom license")
											},
											{
												type: 'container', 
												html: '<div style="text-align:right"><a href="https://creativecommons.org/faq/" target="_blank" title="'+_('New Window')+'" rel="noopener" style="color:inherit;opacity:.7">'+_('Creative Commons licenses information page')+'</a></div>'
											}											
										]
									}
								]
					}
					// / The New eXeLearning
					win = editor.windowManager.open({
						title: 'Insert/edit image',
						data: data,
						bodyType: 'tabpanel',
						body: [
							{
								title: 'General',
								type: 'form',
								items: generalFormItems
							},

							{
								title: 'Advanced',
								type: 'form',
								pack: 'start',
								items: [
									{
										label: 'Style',
										name: 'style',
										type: 'textbox',
										onchange: updateVSpaceHSpaceBorder
									},
									// The New eXeLearning
									{
										type: 'listbox',
										name: 'align',
										label: _("Alignment"),
										'values': [
											{value: "", text: _("-- Not Set --")},
											{value: "baseline", text: _("Baseline")},
											{value: "top", text: _("Top")},
											{value: "middle", text: _("Middle")},
											{value: "bottom", text: _("Bottom")},
											{value: "text-top", text: _("Text Top")},
											{value: "text-bottom", text: _("Text Bottom")},
											{value: "left", text: _("Left")},
											{value: "right", text: _("Right")}
										],
										onselect : updateStyle
									},
									// / The New eXeLearning
									{
										type: 'form',
										layout: 'grid',
										packV: 'start',
										columns: 2,
										padding: 0,
										alignH: ['left', 'right'],
										defaults: {
											type: 'textbox',
											maxWidth: 50,
											onchange: updateStyle
										},
										items: [
											{label: 'Vertical space', name: 'vspace'},
											{label: 'Horizontal space', name: 'hspace'}
											// / The New eXeLearning
											// {label: 'Border', name: 'border'}
											// The New eXeLearning
										]
									}
								]
							}
							// The New eXeLearning
							,{
								title: _("Title and Attribution"),
								type: 'form',
								pack: 'start',
								items: getTabContent()
							}
							// / The New eXeLearning
						],
						// The New eXeLearning
						// onSubmit: onSubmitForm,
						onSubmit: function(){
							// Check the alt text
							var alt = win.find("#alt")[0].value();
							if (alt=="") {
								editor.windowManager.confirm(
									_("Are you sure you want to continue without including an Image Description? Without it the image may not be accessible to some users with disabilities, or to those using a text browser, or browsing the Web with images turned off."),
									function(s){
										if (s) {
											onSubmitForm();
										}
									}
								);
							} else {
								onSubmitForm();
							}
							return false;

						},
						onClose: function(e){
							setTimeout(function(){
								exe_tinymce.forcePrompt = true;
							},1000);
						}
						// / The New eXeLearning
					});

					// The New eXeLearning
					win.updateImageDimensions = function(url) {
						jQuery("<img />").attr("src",url).load(function(){
							win.find('#width').value(this.width);
							win.find('#height').value(this.height);
						});
					}
					exeImageDialog = win;
					getPreviousValues(win);
					// / The New eXeLearning

				}
			}

			// The New eXeLearning
			function getPreviousValues(win){

				toggleCustomLicense("");

				var elm = editor.selection.getNode();

				if (!elm || elm.nodeName!="IMG") return;

				// Dimensions
				// To review (see issue #157 and current_image_size in authoring.js)
				exe_tinymce.current_image_size = [ win.find('#width')[0].value(), win.find('#height')[0].value() ];

				// Is in figure?
				var figure = editor.dom.getParents(elm, '.exe-figure');
				if (figure.length==1) {

					// imageheader
					var header = jQuery(".header",figure);
					if (header.length==1) {
						win.find("#imageheader").value(header.text());
					}

					// imagetitle & imagetitlelink
					var title = jQuery(".title",figure);
					if (title.length==1) {
						win.find("#imagetitle").value(title.text());
						if (title.prop("tagName")=="A") win.find("#imagetitlelink").value(title.attr("href"));
					}

					// authorname & authornamelink
					var author = jQuery(".author",figure);
					if (author.length==1) {
						win.find("#authorname").value(author.text());
						if (author.prop("tagName")=="A") win.find("#authornamelink").value(author.attr("href"));
					}

					// captionlicense
					var license = jQuery(".license",figure);
					if (license.length==1) {

						var licenseText = license.text().replace("(","").replace(")","").replace(_("License")+": ","");
						var licenseField = win.find("#captionlicense")[0];

						// CC0
						if (licenseText=="CC0") {
							licenseField.value("CC0");
						}
						// CC-BY, CC-BY-SA, CC-BY-ND, CC-BY-NC, CC-BY-NC-SA, CC-BY-NC-ND
						else if (licenseText.indexOf("CC ")==0) {
							licenseField.value(licenseText.replace(/ /g,'-').toUpperCase());
						}
						// GNU/GPL
						else if (licenseText=="GNU/GPL") {
							licenseField.value("gnu-gpl");
						}
						// GFDL
						else if (licenseText=="GFDL") {
							licenseField.value("gfdl");
						}
						// Public Domain
						else if (licenseText==_("Public Domain")) {
							licenseField.value("pd");
						}
						// All Rights Reserved
						else if (licenseText==_("All Rights Reserved") || licenseText==_("License")+": "+_("All Rights Reserved")) {
							licenseField.value("copyright");
						}
						// Custom license
						else if (licenseText!="") {
							editor.windowManager.alert(_('Please check the "License" field'));
							var customLicense = jQuery(".custom-license",figure);
							var customLicenseHTML = "";
							if (customLicense.length==1) {
								licenseText = customLicense.html();
							} else {
								// Needed if you add a custom license text and you add a link to that text in TinyMCE (span.custom-license might be removed)
								licenseText = license.html().replace('<span class="sep">(</span>','').replace('<span class="sep">)</span>','');
							}
							win.find("#customcaptionlicense")[0].value(licenseText);
							licenseField.value("custom");
							toggleCustomLicense("custom");
						}
					}

					// Alignment
					var jFigure = jQuery(figure);
					if (jFigure.hasClass("float-left")) win.find("#align")[0].value("left");
					else if (jFigure.hasClass("float-right")) win.find("#align")[0].value("right");

				}

			}
			// The New eXeLearning

			/*
			To review (see 386):
			editor.on('preInit', function() {
				function hasImageClass(node) {
					var className = node.attr('class');
					return className && /\bimage\b/.test(className);
				}

				function toggleContentEditableState(state) {
					return function(nodes) {
						var i = nodes.length, node;

						function toggleContentEditable(node) {
							node.attr('contenteditable', state ? 'true' : null);
						}

						while (i--) {
							node = nodes[i];

							if (hasImageClass(node)) {
								node.attr('contenteditable', state ? 'false' : null);
								tinymce.each(node.getAll('figcaption'), toggleContentEditable);
							}
						}
					};
				}

				editor.parser.addNodeFilter('figure', toggleContentEditableState(true));
				editor.serializer.addNodeFilter('figure', toggleContentEditableState(false));
			});
			*/
			// The New eXeLearning
			editor.on('keydown', function(evt) {
				var node = editor.selection.getNode();
				if (node.nodeName=="IMG") {
					// Delete Keys pressed
					if (evt.keyCode==8 || evt.keyCode==46){
						if (node.parentNode) {
							var figure = "";
							if (node.parentNode.nodeName=='FIGURE' && jQuery(node.parentNode).hasClass("exe-image")) {
								// FIGURE > IMG
								figure = jQuery(node.parentNode);
							} else if (node.parentNode.nodeName=='A' && node.parentNode.parentNode && node.parentNode.parentNode.nodeName=='FIGURE' && jQuery(node.parentNode.parentNode).hasClass("exe-image")) {
								// FIGURE > A > IMG
								figure = jQuery(node.parentNode.parentNode);
							}
							if (figure!="") {
								var pre = " ";
								var pos = "<br />";
								if (evt.keyCode==46) { // SUPR Key
									pre = "<br /> ";
									pos = " ";
								}
								// Remove the parent FIGURE and prevent content loss
								// figure.before(pre).after(pos).remove();
								editor.dom.remove(figure);	
								evt.preventDefault(); // See issue #576
								editor.undoManager.add();								
							}
						}
					}
				}
			});
			// / The New eXeLearning

			editor.addButton('exeimage', {
				icon: 'image',
				tooltip: 'Insert/edit image',
				onclick: createImageList(showDialog),
				stateSelector: 'img:not([data-mce-object],[data-mce-placeholder]),figure.image,figure.exe-image'
			});

			editor.addMenuItem('exeimage', {
				icon: 'image',
				text: 'Insert/edit image',
				onclick: createImageList(showDialog),
				context: 'insert',
				prependToContext: true
			});

			// The New eXeLearning
			editor.on('init', function(e) {
				editor.dom.loadCSS(url + "/css/content.css");
			});
			// / The New eXeLearning

			editor.addCommand('mceImage', createImageList(showDialog));
		});
