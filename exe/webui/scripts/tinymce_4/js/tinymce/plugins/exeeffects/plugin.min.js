/**
 * plugin.min.js
 *
 * Released under Attribution-ShareAlike 4.0 International License.
 * Author: Ignacio Gros (http://gros.es/) for http://exelearning.net/
 *
 * License: http://creativecommons.org/licenses/by-sa/4.0/
 */

/**
 * Effects Plugin for eXeLearning
 * To be used with the files in this folder: /scripts/exe_effects/ (included Timeliner.js by Tarek Anandan)
 */

tinymce.PluginManager.add('exeeffects', function(editor, url) {
	
	var eXeEffects = {
		
		// Available types
		types : [
			'accordion',
			'tabs',
			'paginated',
			'carousel',
			'timeline'
		],

		// Their description
		descriptions : [
			_("Collapsible content panels for presenting information in a limited space."),
			_("A single content area with multiple panels."),
			_("Divide your content into different pages."),
			_("Present a list of contents in horizontal order."),
			_("Simple, interactive timeline able to handle nearly any form of content.")
		],	
		
		// Open the dialog
		open : function(){
			
			eXeEffects.mode = 'create'; // create or edit
			
			eXeEffects.currentType = 'accordion'; // Default value	
			
			var body = [
				
				// General tab
				{
					title: _('General'),
					type: 'form',
					pack: 'start',
					items: [
						{
							type: 'label',
							text: _("Please do not overuse these effects."),
							style: 'font-weight:bold'
						},					
						{
							type: 'listbox',
							minWidth: 150,
							maxWidth: 300,
							name: 'type',
							id: 'type',
							label: _("Choose a type:"),
							'values': [
								{text: _('Accordion'), value: 'type1'},
								{text: _('Tabs'), value: 'type2'},
								{text: _('Pagination'), value: 'type3'},
								{text: _('Carousel'), value: 'type4'},
								{text: _('Timeline'), value: 'type5'}
							],
							onselect: function(){
								eXeEffects.changeType(this.value());
							}
						},						
						{
							type: 'label',
							id: 'type-img',
							text: '',
							minHeight: 145,
							style: 'text-align:center'
						},
						{
							type: 'label',
							id: 'type-desc',
							text: _("Collapsible content panels for presenting information in a limited space."),
							style: 'text-align:center'
						}					
					]
				},
				
				// Instructions tab
				{
					title: _('Instructions'),
					type: 'form',
					pack: 'start',
					items: [
						{
							type: 'label',
							text: _("Please do not overuse these effects."),
							style: 'font-weight:bold'
						},					
						{
							type: 'container',
							style: 'max-height:300px;overflow-y:hidden',
							html: '\
								<ol style="margin:.5em 0 1.5em 2em">\
									<li style="margin-bottom:.5em">'+_("Choose an effect (you can change it later).")+'</li>\
									<li style="margin-bottom:.5em">'+_("To add a new tab, block, page... just add a second level title (Heading 2) followed by its content.")+'</li>\
									<li style="margin-bottom:.5em">'+_("All blocks must start with a second level title (Heading 2).")+'</li>\
									<li style="margin-bottom:.5em">'+_('Timelines require a third level title (Heading 3) right after each Heading 2.')+'</li>\
								</ol>\
								<p>'+_('Change the text of the tabs adding a title to each Heading 2 with the "Insert/Edit Attributes" option:')+' <img src="'+url+'/img/attrs_icon.png" alt="" width="16" height="14" style="margin-left:2px;vertical-align:middle" /></p>\
							'
						}					
					]
				}
				
			];
			
			win = editor.windowManager.open({
				title: _("Effects"),
				body: body,
				bodyType: 'tabpanel',
				onsubmit: eXeEffects.insert
			});

			// Set the default HTML
			jQuery("#type-img").html('<img id="type-thumbnail" src="'+url+'/img/type1.png" width="297" height="131" alt="" />');
			
			// Get the previous values
			eXeEffects.getPreviousValues();	
			
		},
		
		// Change the image and the description
		changeType : function(val) {
			
			var no = parseFloat(val.replace("type",""));
			jQuery("#type-thumbnail").attr("src",url+"/img/"+val+".png");
			jQuery("#type-desc").html(eXeEffects.descriptions[no-1]);
			
			if (val == "type5" && eXeEffects.mode=="edit") {
				
				// You're trying to make a timeline out of any other effect (an accordion, for example)
				// Timelines have a different HTML
				if (eXeEffects.currentType!="timeline") {
					
					editor.windowManager.confirm(
						_('Timelines require a third level title (Heading 3) right after each Heading 2.')+'\n\n'+_("Make a timeline?"),
						function(s){
							if (!s) {
								
								// Not confirmed: Back to the original type
								var no = eXeEffects.types.indexOf(eXeEffects.currentType);
								win.find("#type")[0].value("type"+(no+1));
								jQuery("#type-thumbnail").attr("src",url+"/img/type"+(no+1)+".png");
								jQuery("#type-desc").html(eXeEffects.descriptions[no]);								
							
							}
						}
					);
					
				}
			}
			
		},
		
		getPreviousValues : function(){
			
			var elm = editor.selection.getNode();
			var e = jQuery(elm);
			var vals = eXeEffects.types;
			var parents;
			var classToSelect;
			
			// Check if we're in a block with effects
			for (var i=0;i<vals.length;i++) {
				parents = e.parents(".exe-"+vals[i]);
				if (parents.length>0 || elm.className=="exe-fx exe-"+vals[i]) {
					eXeEffects.mode = 'edit';
					classToSelect = vals[i];
					eXeEffects.currentType = classToSelect;
				}
			}
			
			// We are in a block with effects, so we choose the type and show its image and description
			if (eXeEffects.mode == 'edit') {
                
                if (elm.className=="exe-fx exe-"+classToSelect) {
                    eXeEffects.currentElement = jQuery(elm);
                } else {
                    eXeEffects.currentElement = jQuery(editor.selection.getNode()).parents(".exe-"+classToSelect);
                }
                
				var val = "type"+(eXeEffects.types.indexOf(classToSelect)+1);
				win.find("#type")[0].value(val);
				eXeEffects.changeType(val);
			}
			
		},
		
		activateButton : function(node) {
			
			var activate = false;
			
			var e = jQuery(node);
			var vals = eXeEffects.types;
			var parents;
			
			// Check if we're in a block with effects
			for (var i=0;i<vals.length;i++) {
				parents = e.parents(".exe-"+vals[i]);
				if (parents.length>0 || node.className=="exe-fx exe-"+vals[i]) {
					activate = true;
				}
			}
			
			return activate;
			
		},		
		
		insert : function(){

			var type = win.find("#type")[0].value();
			var vals = eXeEffects.types;
			
			// Get the CSS class
			var classToAdd = "exe-"+vals[(parseInt(type.replace("type",""))-1)];
			
			if (eXeEffects.mode == 'edit') {
				
				// Update the CSS class
				var div = eXeEffects.currentElement;
				div.attr("class",div.attr("class").replace("exe-"+eXeEffects.currentType,classToAdd));
				
			} else {
				
				// Create a new block
				var c = '<div class="exe-fx '+classToAdd+'">';
					if (classToAdd=="exe-timeline") {
						c += '<h2>'+_("Heading 2")+'</h2>';
						c += '<h3>'+_("Heading 3")+'</h3>';
						c += '<p>'+_("Write your content...")+'</p>';
						c += '<h2>'+_("Heading 2")+'</h2>';
						c += '<h3>'+_("Heading 3")+'</h3>';
						c += '<p>'+_("Write your content...")+'</p>';					
					} else {
						c += '<h2>'+_("Heading 2")+'</h2>';
						c += '<p>'+_("Write your content...")+'</p>';
						c += '<h2>'+_("Heading 2")+'</h2>';
						c += '<p>'+_("Write your content...")+'</p>';	
					}			
				c += '</div><br />';
				editor.execCommand('mceInsertContent', false, c);
				
			}
			
			// Allow undo + Close the dialog
			editor.execCommand("mceEndUndoLevel");
			editor.windowManager.close();		
		
		}
		
	}
	
	editor.addButton('exeeffects', {
		tooltip: _("Effects (accordion, tabs, pagination...)"),
		image: url + '/img/exeeffects.png',
		onclick: eXeEffects.open,
		onPostRender: function() {
			var ctrl = this;
			editor.on('NodeChange', function(e) {
				ctrl.active(eXeEffects.activateButton(e.element));
			});
		}		
	});
	
	editor.addMenuItem('exeeffects', {
		text: _("Effects (accordion, tabs, pagination...)"),
		image: url + '/img/exeeffects.png',
		context: 'insert',
		onclick: eXeEffects.open
	});
	
	editor.on('init', function(e) {
		
		editor.dom.loadCSS(url + "/css/content.css");
		
		// jQuery is required
		if (typeof(jQuery)!='function') {
			alert(_('Effects')+": "+_('jQuery is required'));
			return false;			
		}
		
		// i18n in CSS (type names in the right language)
		var d = editor.getDoc();
		var s = '<style type="text/css">';
			s += '.exe-fx.exe-accordion:before{content:"'+_('Accordion')+'"}';
			s += '.exe-fx.exe-tabs:before{content:"'+_('Tabs')+'"}';
			s += '.exe-fx.exe-paginated:before{content:"'+_('Pagination')+'"}';
			s += '.exe-fx.exe-carousel:before{content:"'+_('Carousel')+'"}';
			s += '.exe-fx.exe-timeline:before{content:"'+_('Timeline')+'"}';
		s += '</style>';
		jQuery("HEAD",d).append(s);
		
	});	
	
});